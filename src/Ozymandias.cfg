#  Example Qudi configuration file.
#  The recommended path for user specific files is C:\Users\<user_name>\qudi\config

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    lasergui:
        module.Class: 'ltune_laser.ltunelasergui.LtuneLaserGUI'
        connect:
            ltune_laser_logic: 'ltune_laserlogic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGui'
        connect:
            camera_logic: camera_logic

    pmgui:
        module.Class: 'powermeter.powermetergui.PowerMeterGUI'
        connect: 
            pmlogic: 'powermeterLogic'

    piezogui:
        module.Class: 'Piezo.piezogui.PiezoGUI'
        connect: 
            apt_logic: 'aptLogic'
    daqcount_gui:
        module.Class: 'daq_counter.daqcounter_gui.DAQCounterGUI'
        connect:
            daq_counter_1: 'daqcounter1'
            daq_counter_2: 'daqcounter2'

    stepper_motor:
        module.Class: 'stepper_motor.stepper_motor_gui.StepperGUI'
        connect:
            stepper_logic: 'stepperlogic'

    flippergui:
        module.Class: 'flippermirror.flippermirror_gui.FlipperGUI'
        connect:
            flipperlogic: 'flipLogic'

    manual_LAC:
        module.Class: 'manualLAC.manualLAC.ManualLACGUI'
        connect:
            laclogic: 'LAClogic'
    
    LAC_PID: 
        module.Class: 'LAC_PID.LAC_PID_gui.LACPIDGUI'
        connect:
            pmlogic: 'powermeterLogic'
            pidlogic: 'pidlogic'
            laclogic: 'LAClogic'

logic:
    ltune_laserlogic:
        module.Class: 'ltune_laser_logic.LtuneLaserLogic'
        connect:
            purdue_laser: purdue_laser

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            camera: camera
            # savelogic: 'savelogic'
            # fliplogic: 'flipLogic'

    powermeterLogic:
        module.Class: 'powermeter_logic.PowerMeterLogic'
        connect:
            powerMeter: 'powermeter'

    pidlogic:
        module.Class: 'modified_PID.ModPIDController'
        connect:
            process: 'powermeter'
            control: 'LAC'

    LAClogic:
        module.Class: 'LAC_logic.LACLogic'
        connect:
            LACmotor: 'LAC'

    aptLogic:
        module.Class: 'APTpiezo_logic.APTpiezoLogic'
        connect:
            apt_piezo_1: 'piezo1'
            apt_piezo_2: 'piezo2'
    daqcounter1:
        module.Class: 'daq_counter.DaqCounter'
        options:
            counter_channel: '0'
        connect:
            daq: 'DAQ'

    daqcounter2:
        module.Class: 'daq_counter.DaqCounter'
        options:
            counter_channel: '1'
        connect:
            daq: 'DAQ'

    stepperlogic:
        module.Class: 'stepper_motor_logic.StepperMotorLogic'
        options:
            com_port: 'COM11'
        connect: 
            stepper_motor_1: 'steppermotor1'
            stepper_motor_2: 'steppermotor2'

    flipLogic:
        module.Class: 'flipper_mirror_logic.FlipperMirrorLogic'
        connect:
            flipper1: 'flipper1'
            flipper2: 'flipper2'

hardware:
    purdue_laser:
        module.Class: 'laser.ltune_laser.LtuneLaser'
        options:
            deviceID: '080983'

    camera:
        module.Class: 'camera.DCC1545MCamera.DCC1545M.DCC1545M'

    powermeter:
        module.Class: 'powermeter.TLPMpowermeter.PowerMeter'
        options:
            address: 'USB0::0x1313::0x807B::16072030::INSTR'

    piezo1:
        module.Class: 'Piezo.APTpiezo.APTPiezo'
        options:
            deviceID: '0'
   
    piezo2:
        module.Class: 'Piezo.APTpiezo.APTPiezo'
        options:
            is_second_piezo: True
            deviceID: '31808608'
    DAQ:
        module.Class: 'DAQ.DAQ'
        options:
            range: 'BIP10VOLTS'
            mode: 'single_ended'

    steppermotor1:
        module.Class: 'motor.stepper_motor.StepperMotor'
        options:
            motor_pin_1: 2
            motor_pin_2: 3
            motor_pin_3: 4
            motor_pin_4: 5

    steppermotor2:
        module.Class: 'motor.stepper_motor.StepperMotor'
        options:
            motor_pin_1: 8
            motor_pin_2: 9
            motor_pin_3: 10
            motor_pin_4: 11

    flipper1:
        module.Class: 'flipper_mirror.flipper_mirror.FlipperMirror'
        options:
            deviceID: '37005466'

    flipper2:
        module.Class: 'flipper_mirror.flipper_mirror.FlipperMirror'
        options:
            deviceID: '37005411'

    LAC:
        module.Class: 'motor.LAC_hardware.LACHardware'
